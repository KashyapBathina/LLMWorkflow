{
  "name": "AI Intern Test - YouTube Analysis",
  "nodes": [
    {
      "parameters": {
        "path": "youtube-analysis",
        "method": "POST",
        "options": {
          "responseMode": "lastNode"
        },
        "authentication": "none"
      },
      "id": "Webhook",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "functionCode": "const inputData = $json.body || $json;\nconst url = inputData.url;\n\nif (!url) {\n  throw new Error('URL not found in input. Please provide a valid YouTube channel URL.');\n}\n\n// Handle both @username and channel ID formats\nlet channelUsername = '';\nlet channelId = '';\n\nif (url.includes('youtube.com/@')) {\n  channelUsername = url.split('youtube.com/@')[1].split(/[/?#]/)[0];\n  console.log('Username format detected:', channelUsername);\n  return [{ json: { channelUsername, url, lookupNeeded: true } }];\n} else if (url.includes('/channel/')) {\n  channelId = url.split('/channel/')[1].split(/[/?#]/)[0];\n  console.log('Channel ID format detected:', channelId);\n  // Direct channelId - bypass lookup completely\n  return [{ json: { channelId, url, lookupNeeded: false } }];\n} else if (url.includes('/user/')) {\n  channelUsername = url.split('/user/')[1].split(/[/?#]/)[0];\n  return [{ json: { channelUsername, url, lookupNeeded: true } }];\n} else if (url.includes('youtube.com/c/')) {\n  channelUsername = url.split('youtube.com/c/')[1].split(/[/?#]/)[0];\n  return [{ json: { channelUsername, url, lookupNeeded: true } }];\n} else {\n  // Assume it's a channel name or search query\n  return [{ json: { lookupNeeded: true, query: url } }];\n}"
      },
      "id": "Parse Link",
      "name": "Parse Link",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "id": "Channel ID Logic",
      "name": "Channel ID Logic",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [650, 300],
      "outputs": 1,
      "parameters": {
        "functionCode": "// Determine if we need to convert username to channel ID\nif ($json.channelId) {\n  // We already have the channel ID\n  return [{ json: { channelId: $json.channelId, lookupNeeded: false } }];\n} else if ($json.channelUsername || $json.query) {\n  // We need to look up the channel ID from the username\n  return [{ json: { channelUsername: $json.channelUsername || $json.query, lookupNeeded: true } }];\n} else {\n  throw new Error('Neither channel ID nor username found in the parsed URL');\n}"
      }
    },
    {
      "parameters": {
        "dataType": "boolean",
        "value1": "={{$json.lookupNeeded}}",
        "rules": {
          "rules": [
            {
              "value2": true,
              "operation": "equal"
            },
            {
              "value2": false,
              "operation": "equal"
            }
          ]
        }
      },
      "id": "Channel Route Switch",
      "name": "Channel Route Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [750, 300]
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/youtube/v3/search?part=snippet&type=channel&q={{$json.channelUsername || $json.query}}&key=AIzaSyBpJbjQVkDeXfcUCxwPUxWz1mt9Ss3Rxpk&maxResults=1",
        "method": "GET",
        "options": {}
      },
      "id": "Lookup Channel ID",
      "name": "Lookup Channel ID",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [850, 200]
    },
    {
      "parameters": {
        "functionCode": "// Extract channel ID from search results\nif ($json.items && $json.items.length > 0) {\n  const channelId = $json.items[0].id.channelId;\n  return [{ json: { channelId } }];\n} else {\n  throw new Error('Channel not found for the given username.');\n}"
      },
      "id": "Extract Channel ID",
      "name": "Extract Channel ID",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1050, 200]
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/youtube/v3/channels?part=snippet,statistics&id={{$json.channelId}}&key=AIzaSyBpJbjQVkDeXfcUCxwPUxWz1mt9Ss3Rxpk",
        "method": "GET",
        "options": {}
      },
      "id": "Get Channel Info",
      "name": "Get Channel Info",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1250, 300]
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/youtube/v3/search?part=id&channelId={{$json.channelId}}&order=date&maxResults=10&type=video&key=AIzaSyBpJbjQVkDeXfcUCxwPUxWz1mt9Ss3Rxpk",
        "method": "GET",
        "options": {}
      },
      "id": "Get Recent Videos",
      "name": "Get Recent Videos",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1250, 450]
    },
    {
      "parameters": {
        "functionCode": "// Extract video IDs\nif (!$json.items || $json.items.length === 0) {\n  return [{ json: { videoIds: '', error: 'No videos found' } }];\n}\n\nconst ids = $json.items.map(i => i.id.videoId).join(',');\nreturn [{ json: { videoIds: ids } }];"
      },
      "id": "Collect IDs",
      "name": "Collect IDs",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1450, 450]
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics&id={{$json.videoIds}}&key=AIzaSyBpJbjQVkDeXfcUCxwPUxWz1mt9Ss3Rxpk",
        "method": "GET",
        "options": {}
      },
      "id": "Get Video Stats",
      "name": "Get Video Stats",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1650, 450]
    },
    {
      "parameters": {
        "functionCode": "// Combine channel and video data\nconst channelData = $items('Get Channel Info')[0].json;\nconst videoData = $json;\n\nif (!channelData.items || channelData.items.length === 0) {\n  throw new Error('No channel data found');\n}\n\nconst ch = channelData.items[0];\nconst vids = videoData.items || [];\n\n// Basic stats\nconst stats = {\n  name: ch.snippet.title,\n  id: ch.id,\n  publishedAt: ch.snippet.publishedAt,\n  subscribers: parseInt(ch.statistics.subscriberCount) || 0,\n  videoCount: parseInt(ch.statistics.videoCount) || 0,\n  viewCount: parseInt(ch.statistics.viewCount) || 0\n};\n\n// Content metrics\nlet content = { avgLikes: 0, postingFreqDays: 0, engagement: 0 };\n\nif (vids.length > 0) {\n  const totalLikes = vids.reduce((sum, v) => sum + (parseInt(v.statistics.likeCount) || 0), 0);\n  const totalViews = vids.reduce((sum, v) => sum + (parseInt(v.statistics.viewCount) || 0), 0);\n  const avgLikes = Math.round(totalLikes / vids.length);\n  const avgViews = Math.round(totalViews / vids.length);\n  \n  // Calculate posting frequency\n  const dates = vids.map(v => new Date(v.snippet.publishedAt));\n  const oldestDate = new Date(Math.min(...dates));\n  const freqDays = ((Date.now() - oldestDate) / (1000 * 60 * 60 * 24)) / vids.length;\n  \n  // Average engagement rate (likes per view)\n  const engagement = (totalLikes / totalViews * 100).toFixed(2);\n  \n  content = {\n    avgLikes,\n    avgViews,\n    postingFreqDays: freqDays.toFixed(1),\n    engagement: engagement + '%'\n  };\n}\n\n// Extract common tags and topics\nconst allTags = vids.flatMap(v => v.snippet.tags || []);\nconst tagCount = {};\nallTags.forEach(tag => {\n  tagCount[tag] = (tagCount[tag] || 0) + 1;\n});\n\n// Sort tags by frequency\nconst topTags = Object.entries(tagCount)\n  .sort((a, b) => b[1] - a[1])\n  .slice(0, 5)\n  .map(([tag]) => tag);\n\ncontent.topTags = topTags;\n\n// Final output\nreturn [{ json: { stats, content, recentVideos: vids.slice(0, 5).map(v => ({ \n  title: v.snippet.title,\n  publishedAt: v.snippet.publishedAt,\n  views: v.statistics.viewCount,\n  likes: v.statistics.likeCount,\n  url: https://www.youtube.com/watch?v=${v.id}\n})) } }];"
      },
      "id": "Compute Metrics",
      "name": "Compute Metrics",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1850, 350]
    },
    {
      "id": "Analysis Report LLM",
      "name": "Analysis Report LLM",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2050, 250],
      "credentials": {
        "httpHeaderAuth": { "name": "Header Auth account" }
      },
      "parameters": {
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": {
          "model": "openai/gpt-3.5-turbo",
          "messages": [
            { "role": "system", "content": "You are a YouTube analytics expert who provides insightful channel analysis reports." },
            { 
              "role": "user", 
              "content": "={{Generate a comprehensive YouTube channel analysis report using the following data: Basic stats: Subscribers: ${$json.stats.subscribers}, Views: ${$json.stats.viewCount}, Videos: ${$json.stats.videoCount}. Content metrics: AvgViews: ${$json.content.avgViews}, AvgLikes: ${$json.content.avgLikes}, Engagement: ${$json.content.engagement}. Provide a well-structured analysis that includes: 1. Channel overview & performance summary 2. Content strategy analysis 3. Audience engagement assessment 4. Competitive positioning within their niche 5. Growth trends and opportunities.}}"
            }
          ],
          "temperature": 0.3,
          "max_tokens": 1000
        }
        ,
        "options": {
          "redirect": { "followRedirects": true }
        }
      }
    }
    ,
    {
      "parameters": {
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": {
          "model": "openai/gpt-3.5-turbo",
          "messages": [
            {
              "role": "system",
              "content": "You are a YouTube content strategist who specializes in creating viral content ideas."
          },
            {
              "role": "user",
              "content": "Based on this YouTube channel's stats and metrics, suggest 5 specific viral content ideas that would work well for this creator.\n\nChannel stats: {{$json.stats}}\nContent metrics: {{$json.content}}\nRecent videos: {{$json.recentVideos}}"
          }
          ],
          "temperature": 0.7,
          "max_tokens": 1000
        },
        "options": {
          "redirect": { "followRedirects": true }
        }
      },
      "id": "Prompt Suggestions LLM",
      "name": "Prompt Suggestions LLM",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2050, 400],
      "credentials": {
        "httpHeaderAuth": { "name": "Header Auth account" }
      }
    },
    {
      "parameters": {
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": {
          "model": "openai/gpt-3.5-turbo",
          "messages": [
            {
              "role": "system",
              "content": "You are an expert YouTube copywriter who can create engaging video titles and descriptions."
            },
            {
              "role": "user",
              "content": "Based on the recent videos from this YouTube channel, create 5 fresh title and description combinations that maintain the channel's style but could improve click-through rates.\n\nRecent videos: {{$json.recentVideos}}\n\nFor each recommendation, provide:\n1. Original title\n2. Improved title\n3. Compelling description (2-3 sentences)\n4. Tags to include\n\nMake sure the new titles and descriptions are optimized for search but still authentic to the channel's voice."
            }
          ],
          "temperature": 0.7,
          "max_tokens": 1000
        },
        "options": {
          "redirect": { "followRedirects": true }
        }
      },
      "id": "Copywriting LLM",
      "name": "Copywriting LLM",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2050, 550],
      "credentials": {
        "httpHeaderAuth": { "name": "Header Auth account" }
      }
    },
    {
      "id": "Compile Final Report",
      "name": "Compile Final Report",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2250, 400],
      "parameters": {
        "functionCode": "const analysis=$node['Analysis Report LLM'].json.choices[0].message.content;const ideas=$node['Prompt Suggestions LLM'].json.choices[0].message.content;const copy=$node['Copywriting LLM'].json.choices[0].message.content;const name=$node['Compute Metrics'].json.stats.name;return[{json:{channelName:name,channelAnalysis:analysis,contentIdeas:ideas,copywritingSuggestions:copy}}];"
      }
    }
    

  ],
  "connections": {
    "Webhook": { "main": [[{ "node": "Parse Link", "type": "main", "index": 0 }]] },
    "Parse Link": { 
      "main": [[{ "node": "Channel Route Switch", "type": "main", "index": 0 }]] 
    },
    
    "Channel ID Logic": { 
        "main": [[{ "node": "Channel Route Switch", "type": "main", "index": 0 }]] 
      },

    "Channel Route Switch": {
      "main": [
        [{ "node": "Lookup Channel ID", "type": "main", "index": 0 }],
        [{ "node": "Get Channel Info", "type": "main", "index": 0 }]
      ]
    },


    "Lookup Channel ID": { 
      "main": [[{ "node": "Extract Channel ID", "type": "main", "index": 0 }]]
    },
    "Extract Channel ID": { 
      "main": [[{ "node": "Get Channel Info", "type": "main", "index": 0 }]]
    },
    "Get Channel Info": { "main": [[{ "node": "Get Recent Videos", "type": "main", "index": 0 }]] },
    "Get Recent Videos": { "main": [[{ "node": "Collect IDs", "type": "main", "index": 0 }]] },
    "Collect IDs": { "main": [[{ "node": "Get Video Stats", "type": "main", "index": 0 }]] },
    "Get Video Stats": { "main": [[{ "node": "Compute Metrics", "type": "main", "index": 0 }]] },
      "Compute Metrics": {
      "main": [
          [ { "node": "Analysis Report LLM", "type": "main", "index": 0 } ]
      ]
      },
      "Analysis Report LLM": {
      "main": [
          [ { "node": "Prompt Suggestions LLM", "type": "main", "index": 0 } ]
      ]
      },
      "Prompt Suggestions LLM": {
      "main": [
          [ { "node": "Copywriting LLM", "type": "main", "index": 0 } ]
      ]
      },
      "Copywriting LLM": {
      "main": [
          [ { "node": "Compile Final Report", "type": "main", "index": 0 } ]
      ]
      }
            
  },
  "active": true,
  "settings": {},
  "id": "youtube-analysis-workflow"
}


